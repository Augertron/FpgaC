# FPGA C (fpgac) makefile

HOME=\usr\local
BIN=$(HOME)\bin
LIB=$(HOME)\lib
MAN=$(HOME)\man\man1
CC=bcc32
O=obj
EXE=fpgac.ex
# these two variables correspond to the locations of the bison library and the BCC c compiler
CC_HOME=d:\program files\bcc
BISON_HOME=d:\usr\local\lib

# turn off excessive warnings cause by current source code
CFLAGS= -O -v -w-8004 -w-8064 -w-8065 -w-8069 -w-8070 -DBCC -I"$(CC_HOME)\include"
LDFLAGS= -L$BISON_HOME -L$CC_HOME\lib
YFLAGS= -d
YLIBS= -ly -ll

# If you want to use flex and bison, try these instead:
LEX = flex
YACC = bison
YFLAGS = -d --yacc
YLIBS =
#YLIBS = -lfl

# If you want to use lex and yacc, use these:
# YFLAGS= -d
# YLIBS= -ly -ll

OBJ= fpgac.$(O) adders.$(O) output_xilinx.$(O) output_netlist.$(O) minimize_lut.$(O) syntax.$(O) output_vhdl.$(O) \
	output_altera_vqm.$(O)

$(EXE):	$(OBJ)
	$(CC) $(CFLAGS) -e$(EXE) $(OBJ) $(YLIBS)

lex.yy.c:	syntax.l names.h y.tab.h
	$(LEX) syntax.l

syntax.$(O)::	lex.yy.c
	$(CC) -c $(CFLAGS) -o syntax.$(O) lex.yy.c

$(OBJ):	names.h
output_xilinx.o:	outputvars.h
fpgac.$(O):	y.tab.c
# now compile y.tab.c into the fpgac object
	$(CC) -c $(CFLAGS) -ofpgac.$(O) y.tab.c

y.tab.c y.tab.h::	fpgac.y
# generate y.tab.c and y.tab.h
	$(YACC) $(YFLAGS) fpgac.y

fpgac.sh:	fpgac.skel makefile
	sed 's"LIB_defined_in_the_makefile"$(LIB)"' fpgac.skel > fpgac.sh
	chmod a+x fpgac.sh

clean:
	rm -f *.$(O) *.xnf *.cnf fpgac.compiler y.tab.h lex.yy.c fpgac.sh y.tab.c make.out

lint:	lex.yy.c
	$(YACC) $(YFLAGS) fpgac.y
	lint y.tab.c lex.yy.c adders.c output_xilinx.c minimize_lut.c
	rm -f y.tab.c

install: fpgac.compiler	fpgac.sh
	cp fpgac.sh $(BIN)\fpgac
	cp ../doc/fpgac.1 $(MAN)\fpgac.1
	cp fpgac.compiler $(LIB)\fpgac.compiler
#	ssh -n $(X86HOST) "cd $(SRCDIR); make clean; make fpgac.compiler"
#	cp fpgac.compiler $(BIN)\x86\fpgac.compiler
#	ssh -n $(SUN4HOST) "cd $(SRCDIR); make clean; make fpgac.compiler"
#	cp fpgac.compiler $(BIN)\sun4\fpgac.compiler

newpatchlevel:
	grep '"\$$Revision: ' fpgac.y > patchlevel.h
